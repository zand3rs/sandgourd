#
# Central Assets Config
#
# http.conf
# by: zander - 201609
#

http {
    include                mime.types;
    default_type           text/html;


    ## gzip settings
    gzip                   on;
    gzip_static            on;
    gzip_vary              on;
    gzip_comp_level        9;
    gzip_types             *;
    gzip_proxied           any;
    gzip_disable           msie6;
    gzip_http_version      1.0;

    ## proxy and cache settings
    proxy_cache_path       cache levels=1:2 keys_zone=cache:128m
                           inactive=24h max_size=10g use_temp_path=off;
    proxy_cache            cache;
    proxy_cache_valid      30d;
    proxy_cache_lock       on;
    proxy_cache_use_stale  error timeout invalid_header updating
                           http_403 http_404 http_500 http_502 http_503 http_504;

    proxy_intercept_errors on;
    proxy_redirect         off;
    proxy_hide_header      x-amz-id-2;
    proxy_hide_header      x-amz-request-id;
    proxy_hide_header      x-amz-meta-s3cmd-attrs;

    ## cors
    more_set_headers       "Access-Control-Allow-Origin: *";

    ## cache contol
    more_set_headers       "Cache-Control: public";
    more_set_headers       "Pragma: public";
    expires                max;

    ## other settings
    access_log             off;
    keepalive_timeout      20s; # default is 75s but they say 10-20s is recommended
    sendfile               on;
    server_tokens          off;
    client_max_body_size   8m; # request body size limit
    image_filter_buffer    8m;
    more_clear_headers     Server;

    ## errors
    error_page             401 /401.html;
    error_page             403 /403.html;
    error_page             400 404 405 415 =404 /404.html;
    error_page             500 501 502 503 504 =500 /500.html;

    ## try to detect recognized content-type
    map $request_uri $request_content_type {
        ~(.*\.html?)$  text/html;
        ~(.*\.xml)$    text/xml;
        ~(.*\.css)$    text/css;
        ~(.*\.js)$     application/javascript;
        ~(.*\.json)$   application/json;
        ~(.*\.jpe?g)$  image/jpeg;
        ~(.*\.png)$    image/png;
        ~(.*\.gif)$    image/gif;
        ~(.*\.svg)$    image/svg+xml;
    }

    ## get the basename of the original request
    map $request_uri $request_basename {
        ~/(?<captured_request_basename>[^/?]*)(?:\?|$) $captured_request_basename;
    }

    ## get the basename of the current uri
    map $uri $basename {
        ~/(?<captured_basename>[^/]*)$ $captured_basename;
    }

    server {
        include            http_server.conf;

        ## default anbu secret key
        set_if_empty $anbu_secret_key "!Ansatsu-Senjutsu-Tokushu-Butai!";

        ## default s3 acl
        set_if_empty $s3_default_acl public-read;

        ## ---------------------------------------------------------------------
        ## access-token generator
        location ~* ^/anbu/kinjutsu/cursed-seal/([^/]+)$ {
            set $bucket  $1;

            if ($request_method != GET) {
                return 403;
            }

            auth_basic           "Forbidden Technique";
            auth_basic_user_file htpasswd;

            ## get bucket's digest
            set_md5 $bucket_digest $bucket;

            ## generate app-key
            set_hmac_sha1  $app_key $anbu_secret_key "$host:$bucket:$date_gmt";
            set_encode_hex $app_key $app_key;

            ## generate app-secret
            set_hmac_sha1  $app_secret $anbu_secret_key "$app_key:$bucket_digest";
            set_encode_hex $app_secret $app_secret;

            more_set_headers  "Cache-Control: private";
            more_set_headers  "Pragma: private";
            expires           off;

            echo "key: $app_key, secret: $app_secret";
        }

        ## ---------------------------------------------------------------------
        ### image handler
        location ~* ^/((?!p/)(?!r/)(?!u/)[^/]+/.+\.(gif|jpe?g|png))$ {
            set $req_uri $1;
            set $redirect_uri "/p/$req_uri";

            if ($arg_s) {
                set $redirect_uri "/r/$req_uri";
            }
            if ($request_method = PUT) {
                set $redirect_uri "/u/$req_uri";
            }

            rewrite ^ $redirect_uri last;
        }

        ## ---------------------------------------------------------------------
        ## asset handler
        location ~* ^/((?!p/)(?!r/)(?!u/)[^/]+/.+)$ {
            set     $req_uri $1;
            set     $redirect_uri "/p/$req_uri";

            if ($request_method = PUT) {
                set $redirect_uri "/u/$req_uri";
            }

            rewrite ^ $redirect_uri last;
        }

        ## ---------------------------------------------------------------------
        ## proxy
        location ~* ^/p(/.+)$ {
            set        $req_uri $1;

            if ($request_method !~* ^(GET|HEAD)$) {
                return 403;
            }

            if ($arg_d) {
                more_set_headers   "Content-Type: application/octet-stream";
                more_set_headers   "Content-Disposition: attachment; filename='$request_basename'";
            }

            rewrite    ^ $req_uri break;
            proxy_pass $s3_base_url;
        }

        ## ---------------------------------------------------------------------
        # proxy with resizer
        location ~* ^/r(/.+)$ {
            set $req_uri $1;
            set $w "-";
            set $h "-";

            if ($request_method !~* ^(GET|HEAD)$) {
                return 403;
            }

            if ($arg_s ~* "^([1-9][0-9]*)[xX]([1-9][0-9]*)$") {
                set $w $1;
                set $h $2;
            }
            if ($arg_s ~* "^([1-9][0-9]*)[xX]$") {
                set $w $1;
            }
            if ($arg_s ~* "^[xX]([1-9][0-9]*)$") {
                set $h $1;
            }
            if ($arg_s ~* "^([1-9][0-9]*)$") {
                set $w $1;
                set $h $1;
            }
            if ($arg_s = "thumb") {
                set $w 120;
                set $h 120;
            }
            if ($arg_s = "cover") {
                set $w 320;
                set $h 320;
            }

            rewrite      ^ $req_uri break;
            proxy_pass   $s3_base_url;
            image_filter resize $w $h;
        }

        ## ---------------------------------------------------------------------
        # upload to s3
        location ~* ^/u(/([^/]+)/.+)$ {
            set $req_uri $1;
            set $bucket  $2;

            ## only PUT request is allowed
            if ($request_method != PUT) {
                return 403;
            }

            ## get bucket's digest
            set_md5 $bucket_digest $bucket;

            ## validate credentials
            set_hmac_sha1  $app_secret $anbu_secret_key "$http_key:$bucket_digest";
            set_encode_hex $app_secret $app_secret;
            if ($app_secret != $http_secret) {
                return 403;
            }

            set $amz_acl  $http_x_amz_acl;
            set_if_empty  $amz_acl $s3_default_acl;

            set $amz_date $http_x_amz_date;
            set_if_empty  $amz_date $date_gmt;

            set $req_content_type $content_type;
            set_if_empty $req_content_type $request_content_type;

            set $canonicalized_amz_headers "x-amz-acl:$amz_acl\nx-amz-date:$amz_date";
            set $canonicalized_resource    "/$s3_bucket$req_uri";
            set $string_to_sign            "$request_method\n$http_content_md5\n$req_content_type\n\n$canonicalized_amz_headers\n$canonicalized_resource";

            set_hmac_sha1     $s3_signature $s3_secret_key $string_to_sign;
            set_encode_base64 $s3_signature $s3_signature;

            proxy_set_header Authorization "AWS $s3_access_key:$s3_signature";
            proxy_set_header x-amz-acl     $amz_acl;
            proxy_set_header x-amz-date    $amz_date;
            proxy_set_header Content-Type  $req_content_type;

            set $s3_url "$s3_base_url$req_uri";
            proxy_pass  $s3_url;
        }

        ## ---------------------------------------------------------------------
        ## favicon
        location = /favicon.ico { log_not_found off; }

        ## ---------------------------------------------------------------------
        ## errors
        location ~ ^/(401|403|404|500)\.html$ { internal; }
        location / { return 404; }
    }
}
